/*******************************************************************************************/
/*******************************************************************************************/
/*******************************	Author: Abanoub Ramsis	********************************/
/*******************************	Layer: MCAL				********************************/
/*******************************	AWC: EXTI				********************************/
/*******************************	Version: 1.0			********************************/
/*******************************************************************************************/
/*******************************************************************************************/



#include"STD_TYPES.h"
#include"BIT_MATH.h"

#include"EXTI_private.h"
#include"EXTI_interface.h"
#include"DIO_interface.h"

void static(*ptrINT0_ISR) (void) = NULL;
void static(*ptrINT1_ISR) (void) = NULL;
void static(*ptrINT2_ISR) (void) = NULL;


void EXTI_voidInt0Initialize(u8 copy_u8Method)
{
	SET_BIT(GICR,GICR_INT0);
	MDIO_voidSetPinDirection(PORTD,PIN2,INPUT);
	switch(copy_u8Method)
	{
		case FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
		CLR_BIT(MCUCR,MCUCR_ISC00);
		MDIO_voidSetPinValue(PORTD,PIN2,HIGH);
		break;
		
		case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
		SET_BIT(MCUCR,MCUCR_ISC00);
		MDIO_voidSetPinValue(PORTD,PIN2,LOW);
		break;
		
		case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC01);
		CLR_BIT(MCUCR,MCUCR_ISC00);
		MDIO_voidSetPinValue(PORTD,PIN2,HIGH);
		break;
		
		case LOGIC_CHANGE:
		CLR_BIT(MCUCR,MCUCR_ISC01);
		SET_BIT(MCUCR,MCUCR_ISC00);
		break;
	}
}

void EXTI_voidInt1Initialize(u8 copy_u8Method)
{
	SET_BIT(GICR,GICR_INT1);
	MDIO_voidSetPinDirection(PORTD,PIN3,INPUT);
	switch(copy_u8Method)
	{
		case FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
		CLR_BIT(MCUCR,MCUCR_ISC10);
		MDIO_voidSetPinValue(PORTD,PIN3,HIGH);
		break;
		
		case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
		SET_BIT(MCUCR,MCUCR_ISC10);
		MDIO_voidSetPinValue(PORTD,PIN3,LOW);
		break;
		
		case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC11);
		CLR_BIT(MCUCR,MCUCR_ISC10);
		MDIO_voidSetPinValue(PORTD,PIN3,HIGH);
		break;
		
		case LOGIC_CHANGE:
		CLR_BIT(MCUCR,MCUCR_ISC11);
		SET_BIT(MCUCR,MCUCR_ISC10);
		break;
	}
}

void EXTI_voidInt2Initialize(u8 copy_u8Method)
{
	SET_BIT(GICR,GICR_INT2);
	MDIO_voidSetPinDirection(PORTB,PIN2,INPUT);
	switch(copy_u8Method)
	{
		case FALLING_EDGE:
		CLR_BIT(MCUCSR,MCUCSR_ISC2);
		MDIO_voidSetPinValue(PORTB,PIN2,HIGH);
		break;
		
		case RISING_EDGE:
		SET_BIT(MCUCSR,MCUCSR_ISC2);
		MDIO_voidSetPinValue(PORTB,PIN2,LOW);
		break;
	}
}

void EXTI_voidInt0SetCallBack(void (*INT0_ISR) (void))
{
	ptrINT0_ISR = INT0_ISR;
}

void EXTI_voidInt1SetCallBack(void (*INT1_ISR) (void))
{
	ptrINT1_ISR = INT1_ISR;
}

void EXTI_voidInt2SetCallBack(void (*INT2_ISR) (void))
{
	ptrINT2_ISR = INT2_ISR;
}





void __vector_1 (void)
{
	ptrINT0_ISR();
}

void __vector_2 (void)
{
	ptrINT1_ISR();
}

void __vector_3 (void)
{
	ptrINT2_ISR();
}
